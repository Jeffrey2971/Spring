<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给Spring管理-->
    <!--
    - Spring对bean的管理细节
        - 创建bean的三种方式
            - 1、使用默认构造函数创建
                - 在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的就是默认构造函数bean对象，此时如果类中没有默认构造函数，则对象无法创建
                - <bean id="accountService" class="service.impl.AccountServiceImpl1"></bean>
            - 2、使用普通工厂中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器
                - <bean id="InstanceFactory" class="factory.InstanceFactory"></bean>
                <bean id="accountService" factory-bean="InstanceFactory" factory-method="getAccountService"></bean>
            - 3、使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象，并存入spring容器)
                - <bean id="accountService" class="factory.StaticFactory" factory-method="getAccountService"></bean>
        - bean对象的作用范围
        - bean对象的生命周期
    -->
    <!--创建bean的三种方式-->
    
    <!--第一种方式：使用默认构造函数创建-->
    <!--<bean id="accountService" class="service.impl.AccountServiceImpl1"></bean>-->
    <!--第二种方式：使用普通工厂中的方法创建对象(使用某个类中的方法创建对象，并存入spring容器-->
    <!--<bean id="InstanceFactory" class="factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="InstanceFactory" factory-method="getAccountService"></bean>-->
    <!--第三种方式：使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象，并存入spring容器)-->
    <!--<bean id="accountService" class="factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!--
    Bean的作用范围调整

    - bean标签的scope属性
            - 作用：就用于指定bean的作用范围
            - 取值：单例和多例较为常用
                - singleton：单例的(默认值)
                - prototype：多利的
                - request：作用于web应用的请求范围
                - session：作用于web应用的会话范围
                - global-session：作用于集群环境的会话范围(全局会话范围)，当不是集群环境时，它就是session

    -->
    <!--<bean id="accountService" class="service.impl.AccountServiceImpl1" scope="prototype"></bean>-->


    <!--
    bean对象的生命周期
        -单例对象
            - 出生：当容器创建时对象出生
            - 活着：只要容器还在，对象一直存活
            - 死亡：容器销毁，对象销毁
            - 总结：单例对象的生命周期和容器相同
        -多例对象
            - 出生：当使用对象时，spring框架再创建
            - 活着：对象只要是在使用过程中就一直存活
            - 死亡：当对象长时间不使用切没有别的对象引用时，由Java的垃圾回收器进行回收


    -->

    <bean id="accountService" class="service.impl.AccountServiceImpl1" scope="singleton" init-method="init" destroy-method="destroy"></bean>






</beans>